{
    "name": "Project 1",
    "command": "./concordance_check",
    "prompt": "concordance_check>",
    "use_valgrind": "y",
    "tests": [
        {
            "name": "Start, Quit",
            "description": "Starts the program then issues the exit command which should end the program",
            "output_file": "test_cases/output/start_quit.txt",
            "input_file": "test_cases/input/start_quit.txt"
        },
        {
            "name": "Check for End of Input",
            "description": "Checks that the main() loop detects EOF when scanning typed input and exits. When working interactively in a Unix terminal typing Ctrl-d (Control \"d\") will indicate the end of input. When piping a script in this happens automatically. If this test fails, ensure main() is looking for EOF on scanf()/fscanf() calls and exits when detected.",
            "output_file": "test_cases/output/end_input.txt",
            "input_file": "test_cases/input/end_input.txt"
        },
        {
            "name": "Print Empty Concordancer",
            "description": "Starts the program (with an empty concordancer) and prints out the concordancer contents, which should be empty., ",
            "output_file": "test_cases/output/print_empty.txt",
            "input_file": "test_cases/input/print_empty.txt"
        },
        {
            "name": "Word Lookups in Empty Concordancer",
            "description": "Attempts to look up words in an empty concordancer. Should get a not found message for any lookup attempt.",
            "output_file": "test_cases/output/empty_lookups.txt",
            "input_file": "test_cases/input/empty_lookups.txt"
        },
        {
            "name": "Add Single Word",
            "description": "Starts the program, adds a word to the concordancer, and prints out concordancer contents.",
            "output_file": "test_cases/output/add_single.txt",
            "input_file": "test_cases/input/add_single.txt"
        },
        {
            "name": "Add and Look Up Word",
            "description": "Add a single word to the concordancer, then look it up to verify it is present.",
            "output_file": "test_cases/output/add_single_lookup.txt",
            "input_file": "test_cases/input/add_single_lookup.txt"
        },
        {
            "name": "Add and Look Up Multiple Words",
            "description": "Add several words to the concordancer, then look up each of them to verify they are present.",
            "output_file": "test_cases/output/add_multiple_lookup.txt",
            "input_file": "test_cases/input/add_multiple_lookup.txt"
        },
        {
            "name": "Add and Look Up Multiple Words 2",
            "description": "Add several words to the concordancer, then look up several words, none of which are present in the concordancer.",
            "output_file": "test_cases/output/add_multiple_lookup_2.txt",
            "input_file": "test_cases/input/add_multiple_lookup_2.txt"
        },
        {
            "name": "Add, Print, Lookup Combo",
            "description": "Runs many add, print, and lookup operations interleaved in sequence.",
            "output_file": "test_cases/output/add_print_lookup_combo.txt",
            "input_file": "test_cases/input/add_print_lookup_combo.txt"
        },
        {
            "name": "Add, Query, Print, sorting, reset",
            "description": "Runs add and query operations, checks that output is sorted, resets, runs again",
            "output_file": "test_cases/output/add_query_print_reset.txt",
            "input_file": "test_cases/input/add_query_print_reset.txt"
        },
        {
            "name": "Load From Non-Existent File",
            "description": "Attempts to load from a concordancer from a non-existent file",
            "output_file": "test_cases/output/non_existent.txt",
            "input_file": "test_cases/input/non_existent.txt"
        },
        {
            "name": "Concordancer Insert, Query, Sort",
            "description": "Creates a new concordancer with a small number of words, then queries a few of them, then prints the output.",
            "output_file": "test_cases/output/cord_sort.txt",
            "input_file": "test_cases/input/cord_sort.txt"
        },
        {
            "name": "Read Large Concordancer from File",
            "description": "Reads in a concordancer from a text file containing many words. Prints and does some queries to ensure the concordancer is correctly loaded.",
            "output_file": "test_cases/output/read_large_file.txt",
            "input_file": "test_cases/input/read_large_file.txt"
        },
        {
            "name": "Read Multiple Concordancer Files",
            "description": "Read in one concordancer file, perform a few basic operations, then read in a second concordancer file and perform more operations.",
            "output_file": "test_cases/output/read_multiple_files.txt",
            "input_file": "test_cases/input/read_multiple_files.txt"
        },
        {
            "name": "Concordance Check on Non-Existent File",
            "description": "Attempts to run concordance command on a non-existent file and checks that proper error message is printed.",
            "output_file": "test_cases/output/concordance_check_file_non_existent.txt",
            "input_file": "test_cases/input/concordance_check_file_non_existent.txt"
        },
        {
            "name": "Simple Concordance Check",
            "description": "Sets up a small concordancer, then runs concordance command on a file containing one word that is not present in concordancer.",
            "output_file": "test_cases/output/simple_concordance_check.txt",
            "input_file": "test_cases/input/simple_concordance_check.txt"
        },
        {
            "name": "Simple Concordance Check 2",
            "description": "Sets up a small concordancer, then runs concordance command on a file containing one word that is present in concordancer, then prints it",
            "output_file": "test_cases/output/simple_concordance_check_2.txt",
            "input_file": "test_cases/input/simple_concordance_check_2.txt"
        },
        {
            "name": "Multi-Word Check",
            "description": "Sets up a small concordancer, then runs concordance command on a file containing several words, all of which are present in concordancer.",
            "output_file": "test_cases/output/multi_word_concordance_check.txt",
            "input_file": "test_cases/input/multi_word_concordance_check.txt"
        },
        {
            "name": "Multi-Word Check 2",
            "description": "Sets up a small concordancer, then runs concordance command on a file containing several words, all of which are not present in concordancer.",
            "output_file": "test_cases/output/multi_word_concordance_check_2.txt",
            "input_file": "test_cases/input/multi_word_concordance_check_2.txt"
        },
        {
            "name": "Multi-Word Check 3",
            "description": "Sets up a small concordancer, then runs concordance command on a file containing several words, some of which are in concordancer and others which are not.",
            "output_file": "test_cases/output/multi_word_concordance_check_3.txt",
            "input_file": "test_cases/input/multi_word_concordance_check_3.txt"
        },
        {
            "name": "Check with Empty Concordancer",
            "description": "Runs concordance check on a small file with an empty concordancer. All words should be marked as incorrect.",
            "output_file": "test_cases/output/concordance_check_empty_concordancer.txt",
            "input_file": "test_cases/input/concordance_check_empty_concordancer.txt"
        },
        {
            "name": "Large Concordancer Check",
            "description": "Loads a large concordancer from a provided file, then checks a relatively small file.",
            "output_file": "test_cases/output/large_concordancer_concordance_check.txt",
            "input_file": "test_cases/input/large_concordancer_concordance_check.txt"
        },
        {
            "name": "Large Concordancer and Large File Check",
            "description": "Loads a large concordancer from a provided file, then checks a large file.",
            "output_file": "test_cases/output/large_concordancer_large_file_concordance_check.txt",
            "input_file": "test_cases/input/large_concordancer_large_file_concordance_check.txt"
        },
        {
            "name": "Single Concordancer, Multiple Checks",
            "description": "Loads in a concordancer from a file and uses it to check several documents.",
            "output_file": "test_cases/output/single_concordancer_multi_concordance_check.txt",
            "input_file": "test_cases/input/single_concordancer_multi_concordance_check.txt"
        },
        {
            "name": "Multiple Concordancers, Multiple Checks",
            "description": "Set up a concordancer, perform several checks, then repeat with others.",
            "output_file": "test_cases/output/multi_concordancer_multi_concordance_check.txt",
            "input_file": "test_cases/input/multi_concordancer_multi_concordance_check.txt"
        },
        {
            "name": "Unknown Command",
            "description": "Attempt to run an incorrectly typed command and check that proper error message is printed out.",
            "output_file": "test_cases/output/unknown_command.txt",
            "input_file": "test_cases/input/unknown_command.txt"
        },
        {
            "name": "Concordancer Command Line Argument",
            "description": "Specifies a concordancer file as a command line argument when starting the program. Then runs a few operations.",
            "command": "./concordance_check test_cases/resources/dictionary_medium.txt",
            "output_file": "test_cases/output/concordancer_command_line_arg.txt",
            "input_file": "test_cases/input/concordancer_command_line_arg.txt"
        },
        {
            "name": "Non-Existent Concordancer Command Line Argument",
            "description": "Specifies a non-existent concordancer file as a command line argument. Checks that the proper error message is printed.",
            "command": "./concordance_check non_existent_file.txt",
            "prompt": null,
            "output_file": "test_cases/output/non_existent_concordancer_command_line_arg.txt"
        },
        {
            "name": "Concordancer and Check File Command Line Arguments",
            "description": "Specifies both a concordancer file and a file to check as command line arguments.",
            "command": "./concordance_check test_cases/resources/dictionary_medium.txt test_cases/resources/small_spell_test_2.txt",
            "prompt": null,
            "output_file": "test_cases/output/concordancer_concordance_check_command_line_args.txt"
        },
        {
            "name": "Concordancer and Non-Existent Spell Check File Command Line Arguments",
            "command": "./concordance_check test_cases/resources/dictionary_large.txt non_existent_file.txt",
            "description": "Specifies both a concordancer file and a non-existent file to spell check as command line arguments. Checks that proper error message is printed.",
            "prompt": null,
            "output_file": "test_cases/output/concordancer_non_existent_concordance_check_command_line_args.txt"
        },
        {
            "name": "Non-Existent Concordancer and Non-Existent Spell Check File Command Line Arguments",
            "description": "Specifies both a non-existent concordancer file and a non-existent file to spell check as command line arguments. Checks that proper error message is printed.",
            "command": "./concordance_check non_existent_file.txt another_non_existent_file.txt",
            "prompt": null,
            "output_file": "test_cases/output/non_existent_concordancer_non_existent_concordance_check_command_line_args.txt"
        }
    ]
}
